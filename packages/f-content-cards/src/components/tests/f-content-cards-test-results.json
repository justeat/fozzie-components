{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":14,"numPassedTests":88,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":14,"numTotalTests":88,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1602608076966,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should reformat the appboy data model","location":null,"status":"passed","title":"should reformat the appboy data model"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should handle extras when undefined","location":null,"status":"passed","title":"should handle extras when undefined"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should fallback to linkText when button_1 is undefined","location":null,"status":"passed","title":"should fallback to linkText when button_1 is undefined"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should fallback to imageUrl when image_1 is undefined","location":null,"status":"passed","title":"should fallback to imageUrl when image_1 is undefined"},{"ancestorTitles":["services › utils › transformCardData","when `subtitle` key within extras is populated"],"failureMessages":[],"fullName":"services › utils › transformCardData when `subtitle` key within extras is populated should populate `subtitle` key with subtitle value from extras","location":null,"status":"passed","title":"should populate `subtitle` key with subtitle value from extras"},{"ancestorTitles":["services › utils › transformCardData","when `subtitle` key within extras is populated"],"failureMessages":[],"fullName":"services › utils › transformCardData when `subtitle` key within extras is populated should prepend `description` key from main card config (if set) into description array","location":null,"status":"passed","title":"should prepend `description` key from main card config (if set) into description array"},{"ancestorTitles":["services › utils › transformCardData","when `subtitle` key within extras is populated"],"failureMessages":[],"fullName":"services › utils › transformCardData when `subtitle` key within extras is populated should not append to description array, if description key is not set in main card config","location":null,"status":"passed","title":"should not append to description array, if description key is not set in main card config"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return an empty object if provided card is not an object","location":null,"status":"passed","title":"should return an empty object if provided card is not an object"}],"endTime":1602608113115,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\services\\utils\\_tests\\transformCardData.test.js","startTime":1602608097122,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › TermsAndConditionsCard","when title is undefined"],"failureMessages":[],"fullName":"contentCards › TermsAndConditionsCard when title is undefined should display all props as given","location":null,"status":"passed","title":"should display all props as given"},{"ancestorTitles":["contentCards › TermsAndConditionsCard","when subtitle is undefined"],"failureMessages":[],"fullName":"contentCards › TermsAndConditionsCard when subtitle is undefined should display all props as given","location":null,"status":"passed","title":"should display all props as given"},{"ancestorTitles":["contentCards › TermsAndConditionsCard","when ctaText is undefined"],"failureMessages":[],"fullName":"contentCards › TermsAndConditionsCard when ctaText is undefined should display all props as given","location":null,"status":"passed","title":"should display all props as given"},{"ancestorTitles":["contentCards › TermsAndConditionsCard","when url is undefined"],"failureMessages":[],"fullName":"contentCards › TermsAndConditionsCard when url is undefined should display all props as given","location":null,"status":"passed","title":"should display all props as given"},{"ancestorTitles":["contentCards › TermsAndConditionsCard","when unrelatedKey is undefined"],"failureMessages":[],"fullName":"contentCards › TermsAndConditionsCard when unrelatedKey is undefined should display all props as given","location":null,"status":"passed","title":"should display all props as given"}],"endTime":1602608115622,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\_tests\\TermsAndConditionsCard.test.js","startTime":1602608104576,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ContentCard"],"failureMessages":[],"fullName":"ContentCard should render a link if url is provided","location":null,"status":"passed","title":"should render a link if url is provided"},{"ancestorTitles":["ContentCard"],"failureMessages":[],"fullName":"ContentCard should display description lines","location":null,"status":"passed","title":"should display description lines"},{"ancestorTitles":["ContentCard"],"failureMessages":[],"fullName":"ContentCard should apply the correct URL","location":null,"status":"passed","title":"should apply the correct URL"},{"ancestorTitles":["ContentCard"],"failureMessages":[],"fullName":"ContentCard should call the injected `emitCardView` event when mounted","location":null,"status":"passed","title":"should call the injected `emitCardView` event when mounted"},{"ancestorTitles":["ContentCard"],"failureMessages":[],"fullName":"ContentCard should call the injected `emitCardClick` event when clicked","location":null,"status":"passed","title":"should call the injected `emitCardClick` event when clicked"}],"endTime":1602608115690,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\_tests\\CardContainer.test.js","startTime":1602608103165,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › VoucherCard"],"failureMessages":[],"fullName":"contentCards › VoucherCard should display the voucher code","location":null,"status":"passed","title":"should display the voucher code"},{"ancestorTitles":["contentCards › VoucherCard"],"failureMessages":[],"fullName":"contentCards › VoucherCard should call the copyVoucherCode method when clicked","location":null,"status":"passed","title":"should call the copyVoucherCode method when clicked"},{"ancestorTitles":["contentCards › VoucherCard","`copyVoucherCode` method"],"failureMessages":[],"fullName":"contentCards › VoucherCard `copyVoucherCode` method should exist","location":null,"status":"passed","title":"should exist"},{"ancestorTitles":["contentCards › VoucherCard","`copyVoucherCode` method","when invoked"],"failureMessages":[],"fullName":"contentCards › VoucherCard `copyVoucherCode` method when invoked should make a call to `copy` with the correct params","location":null,"status":"passed","title":"should make a call to `copy` with the correct params"},{"ancestorTitles":["contentCards › VoucherCard","`copyVoucherCode` method","when invoked"],"failureMessages":[],"fullName":"contentCards › VoucherCard `copyVoucherCode` method when invoked should call the injected `emitVoucherCodeClick`","location":null,"status":"passed","title":"should call the injected `emitVoucherCodeClick`"}],"endTime":1602608115742,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\_tests\\VoucherCard.test.js","startTime":1602608113322,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › PostOrderCard"],"failureMessages":[],"fullName":"contentCards › PostOrderCard should display the appropriate content when type is Post_Order_Card_1","location":null,"status":"passed","title":"should display the appropriate content when type is Post_Order_Card_1"},{"ancestorTitles":["contentCards › PostOrderCard"],"failureMessages":[],"fullName":"contentCards › PostOrderCard should hide the heading element if the copy is unavailable","location":null,"status":"passed","title":"should hide the heading element if the copy is unavailable"},{"ancestorTitles":["contentCards › PostOrderCard","condensed"],"failureMessages":[],"fullName":"contentCards › PostOrderCard condensed should apply the condensed class when no background image is available","location":null,"status":"passed","title":"should apply the condensed class when no background image is available"},{"ancestorTitles":["contentCards › PostOrderCard","condensed"],"failureMessages":[],"fullName":"contentCards › PostOrderCard condensed should NOT apply the condensed class when imageUrl is provided","location":null,"status":"passed","title":"should NOT apply the condensed class when imageUrl is provided"},{"ancestorTitles":["contentCards › PostOrderCard","condensed"],"failureMessages":[],"fullName":"contentCards › PostOrderCard condensed should NOT apply the condensed class when extras.image_1 is provided","location":null,"status":"passed","title":"should NOT apply the condensed class when extras.image_1 is provided"}],"endTime":1602608115792,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\_tests\\PostOrderCard.test.js","startTime":1602608100254,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return true if card does not contain brand","location":null,"status":"passed","title":"should return true if card does not contain brand"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return true if card does not contain display times","location":null,"status":"passed","title":"should return true if card does not contain display times"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return false if card brand is not in users brand list","location":null,"status":"passed","title":"should return false if card brand is not in users brand list"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return true if card brand is in users brand list","location":null,"status":"passed","title":"should return true if card brand is in users brand list"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return true if no display times are provided","location":null,"status":"passed","title":"should return true if no display times are provided"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return true if current datetime is between today's display times","location":null,"status":"passed","title":"should return true if current datetime is between today's display times"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return true if current datetime is between \"Any\" display times","location":null,"status":"passed","title":"should return true if current datetime is between \"Any\" display times"},{"ancestorTitles":["services › utils › transformCardData"],"failureMessages":[],"fullName":"services › utils › transformCardData should return false if current datetime is NOT between provided display times","location":null,"status":"passed","title":"should return false if current datetime is NOT between provided display times"}],"endTime":1602608116246,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\services\\utils\\_tests\\isCardCurrentlyActive.test.js","startTime":1602608100112,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › utils › normaliseCardType"],"failureMessages":[],"fullName":"contentCards › utils › normaliseCardType Should return a camelcase ID for given Braze content card type","location":null,"status":"passed","title":"Should return a camelcase ID for given Braze content card type"},{"ancestorTitles":["contentCards › utils › normaliseCardType"],"failureMessages":[],"fullName":"contentCards › utils › normaliseCardType Should return null if type is not equal to string","location":null,"status":"passed","title":"Should return null if type is not equal to string"}],"endTime":1602608116728,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\utils\\_tests\\index.test.js","startTime":1602608115788,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["services › utils › getCardUrlTarget"],"failureMessages":[],"fullName":"services › utils › getCardUrlTarget should open in _self for internal routes","location":null,"status":"passed","title":"should open in _self for internal routes"},{"ancestorTitles":["services › utils › getCardUrlTarget"],"failureMessages":[],"fullName":"services › utils › getCardUrlTarget should open in _blank for external routes","location":null,"status":"passed","title":"should open in _blank for external routes"},{"ancestorTitles":["services › utils › getCardUrlTarget"],"failureMessages":[],"fullName":"services › utils › getCardUrlTarget should default to _blank if URL fails to parse","location":null,"status":"passed","title":"should default to _blank if URL fails to parse"}],"endTime":1602608117062,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\services\\utils\\_tests\\getCardUrlTarget.test.js","startTime":1602608115869,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › PromotionCard1"],"failureMessages":[],"fullName":"contentCards › PromotionCard1 should display the appropriate content when type is promotion_card_1","location":null,"status":"passed","title":"should display the appropriate content when type is promotion_card_1"},{"ancestorTitles":["contentCards › PromotionCard1"],"failureMessages":[],"fullName":"contentCards › PromotionCard1 should display the appropriate content when type is promotion_card_2","location":null,"status":"passed","title":"should display the appropriate content when type is promotion_card_2"}],"endTime":1602608117072,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\_tests\\PromotionCard.test.js","startTime":1602608115894,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › SkeletonLoader"],"failureMessages":[],"fullName":"contentCards › SkeletonLoader should display a single SkeletonLoader card when invoked","location":null,"status":"passed","title":"should display a single SkeletonLoader card when invoked"},{"ancestorTitles":["contentCards › SkeletonLoader"],"failureMessages":[],"fullName":"contentCards › SkeletonLoader should show multiple SkeletonLoader cards when provided with a \"count\" prop","location":null,"status":"passed","title":"should show multiple SkeletonLoader cards when provided with a \"count\" prop"},{"ancestorTitles":["contentCards › SkeletonLoader"],"failureMessages":[],"fullName":"contentCards › SkeletonLoader should show the post order card styling when a type other than \"promo\" is provided","location":null,"status":"passed","title":"should show the post order card styling when a type other than \"promo\" is provided"}],"endTime":1602608117446,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\_tests\\SkeletonLoader.test.js","startTime":1602608115694,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › HomePromotionCard1"],"failureMessages":[],"fullName":"contentCards › HomePromotionCard1 should apply the given test ID","location":null,"status":"passed","title":"should apply the given test ID"},{"ancestorTitles":["contentCards › HomePromotionCard1"],"failureMessages":[],"fullName":"contentCards › HomePromotionCard1 should apply given max-width to inner container","location":null,"status":"passed","title":"should apply given max-width to inner container"}],"endTime":1602608118168,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\homePromotionCard\\_tests\\HomePromotionCard1.test.js","startTime":1602608116778,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["contentCards › HomePromotionCard2"],"failureMessages":[],"fullName":"contentCards › HomePromotionCard2 should apply the given test ID","location":null,"status":"passed","title":"should apply the given test ID"},{"ancestorTitles":["contentCards › HomePromotionCard2"],"failureMessages":[],"fullName":"contentCards › HomePromotionCard2 should display a CTA link and label","location":null,"status":"passed","title":"should display a CTA link and label"}],"endTime":1602608118429,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\cardTemplates\\homePromotionCard\\_tests\\HomePromotionCard2.test.js","startTime":1602608116327,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["`contentCardService`"],"failureMessages":[],"fullName":"`contentCardService` should exist","location":null,"status":"passed","title":"should exist"},{"ancestorTitles":["`contentCardService`","`orderCardsByOrderValue` method"],"failureMessages":[],"fullName":"`contentCardService` `orderCardsByOrderValue` method should sort cards by `order` value","location":null,"status":"passed","title":"should sort cards by `order` value"},{"ancestorTitles":["`contentCardService`","`orderCardsByUpdateValue`, method"],"failureMessages":[],"fullName":"`contentCardService` `orderCardsByUpdateValue`, method should sort cards by last `updated` type","location":null,"status":"passed","title":"should sort cards by last `updated` type"},{"ancestorTitles":["`contentCardService`","`filterCards`"],"failureMessages":[],"fullName":"`contentCardService` `filterCards` should allow a user defined list of filtered content cards","location":null,"status":"passed","title":"should allow a user defined list of filtered content cards"},{"ancestorTitles":["`contentCardService`","`filterCards`","AND `custom_card_type` exists"],"failureMessages":[],"fullName":"`contentCardService` `filterCards` AND `custom_card_type` exists should filter content cards by, `promotion_card_1` & `promotion_card_2`","location":null,"status":"passed","title":"should filter content cards by, `promotion_card_1` & `promotion_card_2`"},{"ancestorTitles":["`contentCardService`","`filterCards`","AND `custom_card_type` does NOT exist"],"failureMessages":[],"fullName":"`contentCardService` `filterCards` AND `custom_card_type` does NOT exist should return `[]`","location":null,"status":"passed","title":"should return `[]`"},{"ancestorTitles":["`contentCardService`","`removeDuplicateContentCards` method"],"failureMessages":[],"fullName":"`contentCardService` `removeDuplicateContentCards` method should remove duplicate content cards that contain the same `title` & `custom_card_type` type","location":null,"status":"passed","title":"should remove duplicate content cards that contain the same `title` & `custom_card_type` type"},{"ancestorTitles":["`contentCardService`","`logBrazeEvent` method","AND `window` is `undefined`"],"failureMessages":[],"fullName":"`contentCardService` `logBrazeEvent` method AND `window` is `undefined` should return `false` to exit the method","location":null,"status":"passed","title":"should return `false` to exit the method"},{"ancestorTitles":["`contentCardService`","`logBrazeEvent` method","AND `window` is `defined` but `appboy` is `undefined`"],"failureMessages":[],"fullName":"`contentCardService` `logBrazeEvent` method AND `window` is `defined` but `appboy` is `undefined` should return `false` to exit the method","location":null,"status":"passed","title":"should return `false` to exit the method"},{"ancestorTitles":["`contentCardService`","`logBrazeEvent` method","AND both `window` & `appboy` exist"],"failureMessages":[],"fullName":"`contentCardService` `logBrazeEvent` method AND both `window` & `appboy` exist should invoke `appboy.requestImmediateDataFlush`","location":null,"status":"passed","title":"should invoke `appboy.requestImmediateDataFlush`"},{"ancestorTitles":["`contentCardService`","`logBrazeEvent` method","AND both `window` & `appboy` exist"],"failureMessages":[],"fullName":"`contentCardService` `logBrazeEvent` method AND both `window` & `appboy` exist should `return` the expected `output`","location":null,"status":"passed","title":"should `return` the expected `output`"},{"ancestorTitles":["`contentCardService`","`getTitleCard`"],"failureMessages":[],"fullName":"`contentCardService` `getTitleCard` should exist","location":null,"status":"passed","title":"should exist"},{"ancestorTitles":["`contentCardService`","`getTitleCard`","when invoked","AND a `card` contains a match for `Terms_And_Conditions_Card`, `url` & `pinned`"],"failureMessages":[],"fullName":"`contentCardService` `getTitleCard` when invoked AND a `card` contains a match for `Terms_And_Conditions_Card`, `url` & `pinned` should return two populated groups of cards: `titleCard` & `otherCards`","location":null,"status":"passed","title":"should return two populated groups of cards: `titleCard` & `otherCards`"},{"ancestorTitles":["`contentCardService`","`getTitleCard`","when invoked","AND a `card` does not contain any matches for `Terms_And_Conditions_Card`, `url` or `pinned`"],"failureMessages":[],"fullName":"`contentCardService` `getTitleCard` when invoked AND a `card` does not contain any matches for `Terms_And_Conditions_Card`, `url` or `pinned` should return `titleCards` as an empty object but include a populated `otherCards` array set","location":null,"status":"passed","title":"should return `titleCards` as an empty object but include a populated `otherCards` array set"},{"ancestorTitles":["`contentCardService`","`applyCardLimit` method"],"failureMessages":[],"fullName":"`contentCardService` `applyCardLimit` method should retain all cards if count is -1","location":null,"status":"passed","title":"should retain all cards if count is -1"},{"ancestorTitles":["`contentCardService`","`applyCardLimit` method"],"failureMessages":[],"fullName":"`contentCardService` `applyCardLimit` method should limit cards by the given count","location":null,"status":"passed","title":"should limit cards by the given count"},{"ancestorTitles":["`contentCardService`","`applyCardLimit` method"],"failureMessages":[],"fullName":"`contentCardService` `applyCardLimit` method should apply card limits using enabledCardType order when limit is set to 1","location":null,"status":"passed","title":"should apply card limits using enabledCardType order when limit is set to 1"}],"endTime":1602608124369,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\services\\_tests\\contentCard.service.test.js","startTime":1602608100676,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ContentCards"],"failureMessages":[],"fullName":"ContentCards should call intitialiseBraze when mounted","location":null,"status":"passed","title":"should call intitialiseBraze when mounted"},{"ancestorTitles":["ContentCards"],"failureMessages":[],"fullName":"ContentCards should format and display allowed card types","location":null,"status":"passed","title":"should format and display allowed card types"},{"ancestorTitles":["ContentCards","loading state"],"failureMessages":[],"fullName":"ContentCards loading state should show a skeleton loading card before Braze has initialised","location":null,"status":"passed","title":"should show a skeleton loading card before Braze has initialised"},{"ancestorTitles":["ContentCards","loading state"],"failureMessages":[],"fullName":"ContentCards loading state should hide the skeleton loading card after Braze has initialised","location":null,"status":"passed","title":"should hide the skeleton loading card after Braze has initialised"},{"ancestorTitles":["ContentCards","loading state"],"failureMessages":[],"fullName":"ContentCards loading state should NOT show a skeleton loading card whilst initialising Braze if \"showLoadingState\" prop is false\"","location":null,"status":"passed","title":"should NOT show a skeleton loading card whilst initialising Braze if \"showLoadingState\" prop is false\""},{"ancestorTitles":["ContentCards","loading state"],"failureMessages":[],"fullName":"ContentCards loading state should default to \"promo\" skeleton loading card","location":null,"status":"passed","title":"should default to \"promo\" skeleton loading card"},{"ancestorTitles":["ContentCards","loading state"],"failureMessages":[],"fullName":"ContentCards loading state should request a \"postOrder\" skeleton loading card when all card types are \"Post_Order_Card_1\"","location":null,"status":"passed","title":"should request a \"postOrder\" skeleton loading card when all card types are \"Post_Order_Card_1\""},{"ancestorTitles":["ContentCards"],"failureMessages":[],"fullName":"ContentCards should call logCardImpressions from f-metadata with data from all displayed cards","location":null,"status":"passed","title":"should call logCardImpressions from f-metadata with data from all displayed cards"},{"ancestorTitles":["ContentCards","when mounting descendants"],"failureMessages":[],"fullName":"ContentCards when mounting descendants should provide a view handler","location":null,"status":"passed","title":"should provide a view handler"},{"ancestorTitles":["ContentCards","when mounting descendants","the view handler"],"failureMessages":[],"fullName":"ContentCards when mounting descendants the view handler should push a correctly-formed tracking event to the data layer","location":null,"status":"passed","title":"should push a correctly-formed tracking event to the data layer"},{"ancestorTitles":["ContentCards","when mounting descendants"],"failureMessages":[],"fullName":"ContentCards when mounting descendants should provide a click handler","location":null,"status":"passed","title":"should provide a click handler"},{"ancestorTitles":["ContentCards","when mounting descendants","the click handler"],"failureMessages":[],"fullName":"ContentCards when mounting descendants the click handler should push a correctly-formed tracking event to the data layer","location":null,"status":"passed","title":"should push a correctly-formed tracking event to the data layer"},{"ancestorTitles":["ContentCards","when mounting descendants","the click handler"],"failureMessages":[],"fullName":"ContentCards when mounting descendants the click handler should log a card click event with braze","location":null,"status":"passed","title":"should log a card click event with braze"},{"ancestorTitles":["ContentCards","when mounting descendants"],"failureMessages":[],"fullName":"ContentCards when mounting descendants should provide a voucher code copied handler","location":null,"status":"passed","title":"should provide a voucher code copied handler"},{"ancestorTitles":["ContentCards","when mounting descendants","the voucher code copied handler"],"failureMessages":[],"fullName":"ContentCards when mounting descendants the voucher code copied handler should emit a voucherCodeClick event","location":null,"status":"passed","title":"should emit a voucherCodeClick event"},{"ancestorTitles":["ContentCards","when test id prop provided"],"failureMessages":[],"fullName":"ContentCards when test id prop provided should generate test id attribute on content cards container","location":null,"status":"passed","title":"should generate test id attribute on content cards container"},{"ancestorTitles":["ContentCards","when test id prop provided"],"failureMessages":[],"fullName":"ContentCards when test id prop provided should generate test id attributes on child content cards components","location":null,"status":"passed","title":"should generate test id attributes on child content cards components"},{"ancestorTitles":["ContentCards"],"failureMessages":[],"fullName":"ContentCards should not generate test id attribute on self or children when no test id provided","location":null,"status":"passed","title":"should not generate test id attribute on self or children when no test id provided"},{"ancestorTitles":["ContentCards","emitters"],"failureMessages":[],"fullName":"ContentCards emitters should emit an event containing the appboy instance when appboy is initialised","location":null,"status":"passed","title":"should emit an event containing the appboy instance when appboy is initialised"},{"ancestorTitles":["ContentCards","emitters"],"failureMessages":[],"fullName":"ContentCards emitters should emit an event containing the content card count when appboy is initialised","location":null,"status":"passed","title":"should emit an event containing the content card count when appboy is initialised"},{"ancestorTitles":["ContentCards","emitters"],"failureMessages":[],"fullName":"ContentCards emitters should emit an event containing the loading status when appboy is initialised","location":null,"status":"passed","title":"should emit an event containing the loading status when appboy is initialised"}],"endTime":1602608128467,"message":"","name":"C:\\justeat\\fozzie-components\\packages\\f-content-cards\\src\\components\\tests\\ContentCards.test.js","startTime":1602608101234,"status":"passed","summary":""}],"wasInterrupted":false}